---
- name: Wait for ssh to be ready
  wait_for:
    port: "22"
    host: "{{ hostvars[inventory_hostname].ansible_host }}"
    search_regex: OpenSSH
    delay: 1
  delegate_to: localhost

- name: Set agents fact
  set_fact:
    agents: "{{ hostvars['localhost'].overcloud_agents }}"

- name: Generate interface_list
  block:
    - name: Set interfaces fact from Nic Switch Agent
      set_fact:
        itfs_from_sriov: "{{ agents[inventory_hostname]['configurations']['device_mappings'].values() | flatten }}"
      when:
        - agents[inventory_hostname]['configurations']['device_mappings'] is defined

    - name: Set interfaces fact from OVS agent
      block:
        - name: Compute iptables rule number
          become: yes
          shell: >
            iptables -L INPUT -n --line-numbers | awk '/DROP/{print $1}'
          register: rulenum

        - name: Allow incoming ovsdb connections
          become: yes
          iptables:
            chain: INPUT
            protocol: tcp
            destination: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
            destination_port: "{{ ovs_manager_port | default(6640) }}"
            jump: ACCEPT
            action: insert
            rule_num: "{{ rulenum.stdout }}"

        - name: Create OVS Manager
          become: yes
          command: >
            ovs-vsctl --timeout=5 --id=@manager -- create Manager
            "target=\"ptcp:{{ ovs_manager_port | default(6640) }}:{{ hostvars[inventory_hostname]['ansible_host'] }}\""
            -- add Open_vSwitch . manager_options @manager
          register: mgr_id

        - name: Get OVS bridge topologies
          delegate_to: localhost
          bridgeinfo:
            host: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
            port: "{{ ovs_manager_port | default(omit) }}"
            bridge_mappings: "{{ agents[inventory_hostname]['configurations']['bridge_mappings'] }}"
          register: brinfo

        - name: Clear OVS Manager
          become: yes
          command: ovs-vsctl -- remove Open_vSwitch . manager_options {{ mgr_id.stdout }}

        - name: Remove proviously installed iptables rule
          become: yes
          iptables:
            chain: INPUT
            protocol: tcp
            destination: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
            destination_port: "{{ ovs_manager_port | default(6640) }}"
            jump: ACCEPT
            state: absent

        - name: Detect linux bond interfaces
          become: yes
          linuxbond:
            brinfo: "{{ brinfo.brinfo | dict_to_items | items_to_dict }}"
          register: brinfo
          when: brinfo is not skipped

        - name: Set ovs_topology fact for OVS agent hosts
          set_fact:
            ovs_topology: "{{ brinfo.brinfo | dict_to_items | selectattr('key', 'match', interface_regex)  | list | items_to_dict }}"
          when: brinfo is not skipped

        - name: Set ovs_topology fact when bridgeinfo skipped
          set_fact:
            ovs_topology: {}
          when: brinfo is skipped

        - name: Set interfaces fact
          set_fact:
            itfs_from_ovs: "{{ ovs_topology.keys() }}"
      when:
        - agents[inventory_hostname]['configurations']['bridge_mappings'] is defined

- name: Set interface_list fact
  vars:
  set_fact:
    interface_list: "{{ itfs_from_sriov | default([]) | union(itfs_from_ovs | default([]) | list) }}"

- name: Collect LLDP and VF info
  become: yes
  lldp:
    interfaces: "{{ interface_list }}"
    lldp_timeout: "{{ lldp_timeout | default(30) }}"
    ovs_bridges: "{{ ovs_topology | default({}) }}"
  register: lldp

- name: Generate topology information
  topology:
    system_name: "{{ inventory_hostname }}"
    interfaces: "{{ lldp.stdout }}"
    ovs_bridges: "{{ ovs_topology | default({}) }}"
  register: interfaces_json
  delegate_to: localhost

- name: Display topology json when verbosity >= 1, skip otherwise
  debug:
    msg: "{{ interfaces_json }}"
    verbosity: 1

- name: Create output file name
  set_fact:
    json_outfile: "{{ temp_dir }}/{{ inventory_hostname }}.json"

- name: Write the json output
  template:
    src: output.j2
    dest: "{{ json_outfile }}"
  delegate_to: localhost

- name: Print out the contents of the json output file when verbosity >= 1, skip otherwise
  debug:
    msg: "{{ lookup('file', '{{ json_outfile }}') }}"
    verbosity: 1
