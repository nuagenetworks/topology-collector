---
- name: Gather needed facts
  setup:
    gather_subset: network

- name: Wait for ssh to be ready
  local_action:
    module: wait_for
    port: "22"
    host: "{{ inventory_hostname }}"
    search_regex: OpenSSH
    delay: 1

- name: Generate interface_list
  block:
    - name: Get VF interfaces
      become: yes
      shell: "set -o pipefail && lshw -quiet  -c network -businfo | grep  'Virtual Function' | awk '{print $2}'"
      register: lshw
      failed_when: false

    - name: Set vf_list fact when lshw succeded
      set_fact:
        vf_list: "{{ lshw.stdout_lines | list }}"
      when: lshw.rc == 0

    - name: Set vf_list fact when lshw failed
      set_fact:
        vf_list: []
      when: lshw.rc != 0

    - name: Set interfaces fact from ansible_interfaces
      set_fact:
        interfaces: "{{ ansible_interfaces | select('match', interface_regex) | list | difference(vf_list) }}"

    - name: Get OVS bridge info
      bridgeinfo:
        host: "{{ ovs_manager_ip | default(omit) }}"
        port: "{{ ovs_manager_port | default(omit) }}"
      register: brinfo
      ignore_errors: yes

    - name: Set ovs_topology fact when bridgeinfo succeeded
      set_fact:
        ovs_topology: "{{ brinfo.brinfo | dict_to_items | selectattr('key', 'match', interface_regex)  | list | items_to_dict }}"
      when: not brinfo.failed

    - name: Set ovs_topology fact when bridgeinfo failed
      set_fact:
        ovs_topology: {}
      when: brinfo.failed

    - name: Set interface_list fact
      set_fact:
        interface_list: "{{ interfaces | union(ovs_topology.keys() | list) }}"

    - name: Display interface list when verbosity >= 1, skip otherwise
      debug: msg="{{ interface_list }}" verbosity=1

- name: Ensure lldpad
  become: true
  package:
    name: lldpad
    state: present

- name: Ensure lldpad service is running
  become: true
  service:
    name: lldpad
    enabled: yes
    state: started

- name: Configure lldpad
  become: true
  command: lldptool set-lldp -i {{ item }}  adminStatus=rx
  with_items: "{{ interface_list }}"
  when:
    - "'dpdk' not in item"
    - not ovs_advanced_mode|default(False)

- name: Execute topology collector
  topology:
    system_name: "{{ inventory_hostname }}"
    interface: "{{ item }}"
    ovs_bridge: "{{ ovs_topology[item] | default(omit) }}"
    host: "{{ ovs_manager_ip | default(omit) }}"
    port: "{{ ovs_manager_port | default(omit) }}"
    advanced_mode: "{{ ovs_advanced_mode | default(False) }}"
    lldp_poll_delay: "{{ lldp_poll_delay | default(5) }}"
  with_items: "{{ interface_list }}"
  register: interface_json
  ignore_errors: yes

- name: Display topology json when verbosity >= 1, skip otherwise
  debug: msg="{{ interface_json }}" verbosity=1

- name: Create output file name
  set_fact: json_outfile={{ temp_dir }}/{{ inventory_hostname }}.json

- name: Write the json output
  template: src=output.j2 dest={{ json_outfile }}
  delegate_to: 127.0.0.1

- name: Print out the contents of the json output file when verbosity >= 1, skip otherwise
  debug: msg="{{ lookup('file', '{{ json_outfile }}') }}" verbosity=1
